{"version":3,"sources":["webpack:///./src/components/image.js","webpack:///./src/pages/index.js"],"names":["filename","query","render","data","image","images","edges","find","n","node","relativePath","includes","imageSizes","childImageSharp","sizes","BlogIndex","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","location","map","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery"],"mappings":"4OAKe,kBAAGA,EAAH,EAAGA,SAAH,OAIb,kBAAC,cAAD,CAGEC,MAAK,YAmBLC,OAAQ,SAACC,GAIP,IAAMC,EAAQD,EAAKE,OAAOC,MAAMC,MAAK,SAAAC,GACnC,OAAOA,EAAEC,KAAKC,aAAaC,SAASX,MAGtC,GAAKI,EAAL,CAGA,IAAMQ,EAAaR,EAAMK,KAAKI,gBAAgBC,MAC9C,OAAO,kBAAC,IAAD,CAAKA,MAAOF,MAlCvB,U,0DCAIG,E,gLACJb,OAAA,WAAU,IACAC,EAASa,KAAKC,MAAdd,KACFe,EAAYf,EAAKgB,KAAKC,aAAaC,MACnCC,EAAQnB,EAAKoB,kBAAkBjB,MAErC,OACE,kBAAC,IAAD,CAAQkB,SAAUR,KAAKC,MAAMO,SAAUH,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACCC,EAAMG,KAAI,YAAe,IAAZhB,EAAW,EAAXA,KACNY,EAAQZ,EAAKiB,YAAYL,OAASZ,EAAKkB,OAAOC,KACpD,OACE,6BAASC,IAAKpB,EAAKkB,OAAOC,MACxB,gCACE,wBACEE,MAAO,CACLC,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAU,QAAWC,GAAIzB,EAAKkB,OAAOC,MACjDP,IAGL,+BAAQZ,EAAKiB,YAAYS,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQ5B,EAAKiB,YAAYY,aAAe7B,EAAK8B,YAInD,kBAAC,EAAD,CAAOvC,SAAS,mB,GAjCNwC,IAAMC,WA4CjBC,GAFE3B,YAEO,e","file":"component---src-pages-index-js-ebccbad2fe3cb465becd.js","sourcesContent":["import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\n// 画像ファイルパスをプロパティに取るようなコンポーネントを定義\nexport default ({ filename }) => (\n\n  // ページじゃないコンポーネントでもGraphQLが使えるように\n  // StaticQueryタグを使う\n  <StaticQuery\n\n    // GraphQLのクエリ引数には何も指定しない！\n    query={graphql`\n      query {\n        images: allFile {\n          edges {\n            node {\n              relativePath\n              name\n              childImageSharp {\n                sizes(maxWidth: 800) {\n                  ...GatsbyImageSharpSizes\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n\n    // 全画像情報がdataに代入されている\n    render={(data) => {\n\n      // 指定した画像ファイルパス（コンポーネントのプロパティ）と\n      // 一致するgatsby-image用の情報を取得\n      const image = data.images.edges.find(n => {\n        return n.node.relativePath.includes(filename)\n      })\n\n      if (!image) return\n      \n      // Imgタグでgatsby-imageで最適化された画像を表示する\n      const imageSizes = image.node.childImageSharp.sizes\n      return <Img　sizes={imageSizes} />\n    }}\n  />\n)","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Image from \"../components/image\"\nimport { rhythm } from \"../utils/typography\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt,\n                  }}\n                />\n              </section>\n              <Image filename=\"pic1.jpg\" />\n            </article>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}