{"version":3,"sources":["webpack:///./src/components/image.js","webpack:///./src/pages/index.js"],"names":["Image","props","query","render","data","image","images","edges","find","n","node","relativePath","includes","filename","imageSizes","childImageSharp","sizes","alt","BlogIndex","this","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","location","map","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery"],"mappings":"y6nBAyCeA,EApCD,SAACC,GAAD,OACZ,kBAAC,cAAD,CACEC,MAAK,aAkBLC,OAAQ,SAACC,GACP,IAAMC,EAAQD,EAAKE,OAAOC,MAAMC,MAAK,SAAAC,GACnC,OAAOA,EAAEC,KAAKC,aAAaC,SAASX,EAAMY,aAE5C,IAAKR,EAAS,OAAO,KAErB,IAAMS,EAAaT,EAAMK,KAAKK,gBAAgBC,MAC9C,OACE,kBAAC,IAAD,CACEC,IAAKhB,EAAMgB,IACXD,MAAOF,KA7Bf,U,0DCGII,E,gLACJf,OAAA,WAAU,IACAC,EAASe,KAAKlB,MAAdG,KACFgB,EAAYhB,EAAKiB,KAAKC,aAAaC,MACnCC,EAAQpB,EAAKqB,kBAAkBlB,MAErC,OACE,kBAAC,IAAD,CAAQmB,SAAUP,KAAKlB,MAAMyB,SAAUH,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACCC,EAAMG,KAAI,YAAe,IAAZjB,EAAW,EAAXA,KACNa,EAAQb,EAAKkB,YAAYL,OAASb,EAAKmB,OAAOC,KACpD,OACE,6BAASC,IAAKrB,EAAKmB,OAAOC,MACxB,gCACE,wBACEE,MAAO,CACLC,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAU,QAAWC,GAAI1B,EAAKmB,OAAOC,MACjDP,IAGL,+BAAQb,EAAKkB,YAAYS,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQ7B,EAAKkB,YAAYY,aAAe9B,EAAK+B,YAInD,kBAAC,EAAD,CAAO5B,SAAS,mB,GAjCN6B,IAAMC,WA4CjBC,GAFE1B,YAEO","file":"component---src-pages-index-js-c9fe2c5442f6432d78d2.js","sourcesContent":["\nimport React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst Image = (props) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        images: allFile {\n          edges {\n            node {\n              relativePath\n              name\n              childImageSharp {\n                sizes(maxWidth: 600) {\n                  ...GatsbyImageSharpSizes\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n\n    render={(data) => {\n      const image = data.images.edges.find(n => {\n        return n.node.relativePath.includes(props.filename);\n      });\n      if (!image) { return null; }\n\n      const imageSizes = image.node.childImageSharp.sizes;\n      return (\n        <Img\n          alt={props.alt}\n          sizes={imageSizes}\n        />\n      );\n    }}\n  />\n)\nexport default Image","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Image from \"../components/image\"\nimport { rhythm } from \"../utils/typography\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt,\n                  }}\n                />\n              </section>\n              <Image filename=\"pic1.jpg\" />\n            </article>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}